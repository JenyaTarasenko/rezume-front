{"ast":null,"code":"var _jsxFileName = \"/Users/kiril/Desktop/js/Django-react-rezume/frontend/app-rezume/src/components/CardSection/CardSection.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\nimport { fetchProjects } from '../../services/api';\n// import './style.css';\n// import { Link } from 'react-router-dom';\n\n// useEffect(() => {\n//   fetch(`${BASE_URL}/api/projects/`)\n//     .then(response => {\n//       if (!response.ok) {\n//         throw new Error('Network response was not ok');\n//       }\n//       return response.json();\n//     })\n//     .then(data => {\n//       setProjects(data);  \n//       setLoading(false);   \n//     })\n//     .catch(error => {\n//       console.error('Error:', error);\n//       setError(error);    \n//       setLoading(false);   \n//     });\n// }, []); \n\n// import React, { useEffect, useState } from 'react';\n// import { Link } from 'react-router-dom';\n// import './style.css';\n\n// const Projects = () => {\n//   const [projects, setProjects] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n// useEffect(()=>{\n//   fetchProjects()\n//     .then(data=>{\n//       setProjects(data);\n//       setLoading(false);\n//     })\n//     .catch(error=>{\n\n//       setError(error);\n//       setLoading(false);\n//     });\n\n// },[]);\n\n//   const truncateText = (text, length) => {\n//     if (text.length > length) {\n//       return text.slice(0, length) + '...';\n//     }\n//     return text;\n//   };\n\n//   if (loading) {\n//     return <div>Загрузка...</div>;  // Пока загружаются данные\n//   }\n\n//   if (error) {\n//     return <div>Ошибка: {error.message}</div>;  // Если произошла ошибка\n//   }\n\n//   return (\n//     <section className=\"card-section\">\n//       <div className=\"card-conteiner\">\n//         {projects.length === 0 ? (\n//           <p>Нет проектов для отображения</p>\n//         ) : (\n//           projects.map((project) => (\n//             <Link to={`/projects/${project.id}`} key={project.id} className=\"no-link-style\">\n//               <div className=\"glass-card\">\n//                 <div className=\"card-logo\">\n//                   {/* Вы можете заменить это на свой логотип */}\n//                   <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"currentColor\" className=\"size-6\">\n//                     <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3\" />\n//                   </svg>\n//                 </div>\n//                 <div className=\"card-description\">\n//                   <h5>{project.name}</h5>\n//                 </div>\n//                 <div className=\"card-items\">\n//                   <p>{truncateText(project.description, 100)}</p>\n//                 </div>\n//                 <div className=\"card-link\">\n//                   {project.link && (\n//                     <a href={project.link} target=\"_blank\" rel=\"noopener noreferrer\">\n//                       Перейти на проект\n//                     </a>\n//                   )}\n//                 </div>\n//               </div>\n//             </Link>\n//           ))\n//         )}\n//       </div>\n//     </section>\n//   );\n// };\n\n// export default Projects;\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Projects = () => {\n  _s();\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Добавляем тестовый fetch запрос в useEffect\n  useEffect(() => {\n    // Убедись, что здесь правильно указываешь URL для API\n    const fetchProjects = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:8001'); // Заменить на правильный URL для продакшн\n        if (!response.ok) {\n          throw new Error('Ошибка сети!');\n        }\n        const data = await response.json(); // Преобразуем ответ в JSON\n        setProjects(data); // Сохраняем данные в стейт\n        setLoading(false); // Завершаем загрузку\n      } catch (error) {\n        setError(error); // Обрабатываем ошибки\n        setLoading(false); // Завершаем загрузку\n      }\n    };\n    fetchProjects(); // Вызываем функцию загрузки данных\n  }, []); // Пустой массив зависимостей, чтобы запрос выполнялся один раз при монтировании компонента\n\n  // Функция для обрезки текста\n  const truncateText = (text, length) => {\n    if (text.length > length) {\n      return text.slice(0, length) + '...';\n    }\n    return text;\n  };\n\n  // Проверяем состояние загрузки\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Проверяем ошибки\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"card-section\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-conteiner\",\n      children: projects.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u041D\\u0435\\u0442 \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u043E\\u0432 \\u0434\\u043B\\u044F \\u043E\\u0442\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this) : projects.map(project => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"glass-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: project.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: truncateText(project.description, 100)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 15\n        }, this)]\n      }, project.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s(Projects, \"D01YWZOqXtPgB8Jf7trLNzFYnAg=\");\n_c = Projects;\nexport default Projects;\nvar _c;\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"names":["fetchProjects","React","useEffect","useState","jsxDEV","_jsxDEV","Projects","_s","projects","setProjects","loading","setLoading","error","setError","response","fetch","ok","Error","data","json","truncateText","text","length","slice","children","fileName","_jsxFileName","lineNumber","columnNumber","message","className","map","project","name","description","id","_c","$RefreshReg$"],"sources":["/Users/kiril/Desktop/js/Django-react-rezume/frontend/app-rezume/src/components/CardSection/CardSection.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\nimport {fetchProjects} from '../../services/api';\n// import './style.css';\n// import { Link } from 'react-router-dom';\n\n\n  // useEffect(() => {\n  //   fetch(`${BASE_URL}/api/projects/`)\n  //     .then(response => {\n  //       if (!response.ok) {\n  //         throw new Error('Network response was not ok');\n  //       }\n  //       return response.json();\n  //     })\n  //     .then(data => {\n  //       setProjects(data);  \n  //       setLoading(false);   \n  //     })\n  //     .catch(error => {\n  //       console.error('Error:', error);\n  //       setError(error);    \n  //       setLoading(false);   \n  //     });\n  // }, []); \n  \n  \n// import React, { useEffect, useState } from 'react';\n// import { Link } from 'react-router-dom';\n// import './style.css';\n\n\n\n\n\n// const Projects = () => {\n//   const [projects, setProjects] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n// useEffect(()=>{\n//   fetchProjects()\n//     .then(data=>{\n//       setProjects(data);\n//       setLoading(false);\n//     })\n//     .catch(error=>{\n\n//       setError(error);\n//       setLoading(false);\n//     });\n\n// },[]);\n  \n  \n\n//   const truncateText = (text, length) => {\n//     if (text.length > length) {\n//       return text.slice(0, length) + '...';\n//     }\n//     return text;\n//   };\n\n//   if (loading) {\n//     return <div>Загрузка...</div>;  // Пока загружаются данные\n//   }\n\n//   if (error) {\n//     return <div>Ошибка: {error.message}</div>;  // Если произошла ошибка\n//   }\n\n//   return (\n//     <section className=\"card-section\">\n//       <div className=\"card-conteiner\">\n//         {projects.length === 0 ? (\n//           <p>Нет проектов для отображения</p>\n//         ) : (\n//           projects.map((project) => (\n//             <Link to={`/projects/${project.id}`} key={project.id} className=\"no-link-style\">\n//               <div className=\"glass-card\">\n//                 <div className=\"card-logo\">\n//                   {/* Вы можете заменить это на свой логотип */}\n//                   <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"currentColor\" className=\"size-6\">\n//                     <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3\" />\n//                   </svg>\n//                 </div>\n//                 <div className=\"card-description\">\n//                   <h5>{project.name}</h5>\n//                 </div>\n//                 <div className=\"card-items\">\n//                   <p>{truncateText(project.description, 100)}</p>\n//                 </div>\n//                 <div className=\"card-link\">\n//                   {project.link && (\n//                     <a href={project.link} target=\"_blank\" rel=\"noopener noreferrer\">\n//                       Перейти на проект\n//                     </a>\n//                   )}\n//                 </div>\n//               </div>\n//             </Link>\n//           ))\n//         )}\n//       </div>\n//     </section>\n//   );\n// };\n\n// export default Projects;\n\n\nimport React, { useEffect, useState } from 'react';\n\nconst Projects = () => {\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Добавляем тестовый fetch запрос в useEffect\n  useEffect(() => {\n    // Убедись, что здесь правильно указываешь URL для API\n    const fetchProjects = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:8001'); // Заменить на правильный URL для продакшн\n        if (!response.ok) {\n          throw new Error('Ошибка сети!');\n        }\n        const data = await response.json();  // Преобразуем ответ в JSON\n        setProjects(data);  // Сохраняем данные в стейт\n        setLoading(false);   // Завершаем загрузку\n      } catch (error) {\n        setError(error);  // Обрабатываем ошибки\n        setLoading(false);   // Завершаем загрузку\n      }\n    };\n\n    fetchProjects();  // Вызываем функцию загрузки данных\n  }, []);  // Пустой массив зависимостей, чтобы запрос выполнялся один раз при монтировании компонента\n\n  // Функция для обрезки текста\n  const truncateText = (text, length) => {\n    if (text.length > length) {\n      return text.slice(0, length) + '...';\n    }\n    return text;\n  };\n\n  // Проверяем состояние загрузки\n  if (loading) {\n    return <div>Загрузка...</div>;\n  }\n\n  // Проверяем ошибки\n  if (error) {\n    return <div>Ошибка: {error.message}</div>;\n  }\n\n  return (\n    <section className=\"card-section\">\n      <div className=\"card-conteiner\">\n        {projects.length === 0 ? (\n          <p>Нет проектов для отображения</p>\n        ) : (\n          projects.map((project) => (\n            <div key={project.id} className=\"glass-card\">\n              <h5>{project.name}</h5>\n              <p>{truncateText(project.description, 100)}</p>\n            </div>\n          ))\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default Projects;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}